---
alwaysApply: true
---

# Next.js 블로그 프로젝트 AI 지침

## 프로젝트 개요

- Next.js 15 + Contentlayer2 + MDX 블로그
- Tailwind CSS 4 + Typography, Geist 폰트
- GitHub Pages 정적 배포 (`output: 'export'`)
- TypeScript 엄격 모드, 다크모드 지원

## 핵심 규칙

- 서버 컴포넌트 기본, 클라이언트는 필요시만 `"use client"`
- MDX frontmatter: `title`(필수), `date`(필수), `description`, `tags`
- 다크모드 필수: 모든 색상에 `dark:` 클래스 추가
- 모바일 우선 반응형, `max-w-4xl mx-auto px-4` 레이아웃

## 주요 패턴

### Contentlayer 데이터

```typescript
import { allPosts } from "contentlayer/generated";
const posts = allPosts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
const post = allPosts.find((post) => post.slug === slug);
```

### MDX Frontmatter 예시

```yaml
---
title: "포스트 제목"          # 필수
date: "2025-09-15"         # 필수
description: "포스트 설명"    # 선택
tags: ["Next.js", "블로그"]  # 선택
---
```

### 스타일링 패턴

- 제목: `text-3xl font-bold` (홈), `text-4xl font-bold` (포스트)
- 본문: `prose` 클래스 (@tailwindcss/typography)
- 태그: `text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200`
- 색상: `bg-white dark:bg-gray-900`, `text-gray-900 dark:text-white`

### 모바일 UX 규칙 (중요!)

- **Sticky 헤더**: 데스크톱만 고정, 모바일은 일반 스크롤
  - ✅ 올바른 예: `className="glass-header md:sticky md:top-0 z-50"`
  - ❌ 잘못된 예: `className="glass-header sticky top-0 z-50"`
- **이유**: 모바일에서 sticky 헤더가 화면의 30% 이상을 차지하면 콘텐츠 읽기 불편
- **적용 위치**: 모든 페이지 헤더 (홈페이지, 포스트 상세 페이지 등)

### 스크롤 반응형 헤더 패턴

**⚠️ 핵심**: `.app-wrapper`의 `scrollTop` 사용 (window.scrollY 아님!)

- 이유: 프로젝트의 스크롤 컨테이너가 `.app-wrapper`이기 때문
- 이벤트도 `.app-wrapper`에 등록해야 작동함

## 빌드 & 배포

```bash
npm run dev    # 개발 서버 (Turbopack)
npm run build  # 정적 빌드 (GitHub Pages용)
```

- `output: 'export'`, `trailingSlash: true` 설정 필수
- `out/` 디렉토리에 정적 파일 생성

## 개발 워크플로우 (필수 준수)

### 1단계: 계획 수립 및 승인

- 모든 개발 요청 시 먼저 **상세한 계획**을 제시
- **기능 요구사항 분석** 및 **목표 명시**
- **디렉토리 구조** 및 **파일 배치 전략** 설명
- **각 파일의 역할과 생성 이유** 상세 설명
- **컴포넌트 간 관계도** 및 **데이터 흐름** 명시
- **기술 스택** 및 **라이브러리 선택 근거** 설명
- **예상 작업 시간** 및 **난이도** 평가
- **사용자 승인 후** 다음 단계 진행

### 2단계: 테스트 코드 작성 및 확인

- 실제 구현 전 **테스트 코드 먼저 작성**
- Jest + React Testing Library 사용
- **테스트 시나리오와 예상 결과** 설명
- **사용자 확인 후** 구현 단계로 진행

### 3단계: 구현 및 최종 확인

- 테스트를 통과하는 **실제 코드 구현**
- 구현된 **코드의 핵심 로직** 설명
- **다음 작업이나 개선사항** 제안
- **사용자 최종 승인** 요청

### 승인 요청 규칙

- 각 단계마다 반드시 **"다음 단계로 진행해도 될까요?"** 질문
- 사용자가 **명시적으로 승인**하기 전까지 대기
- 중간에 **수정 요청**이 있으면 해당 단계부터 재시작

## 스타일링 규칙 (중요!)

### 글래스모피즘 효과 적용 시

1. **전체 UI 일관성**: 코드블록만 수정하지 말고 전체 UI에 동일한 효과 적용
   - `glass-card`: 검색바, 태그 필터, 포스트 카드
   - `glass-card-content`: 본문 영역
   - `prose code`: 인라인 코드

2. **iOS 18 스타일 왜곡 효과**:

   ```css
   backdrop-filter: 
     blur(20px) 
     saturate(200%) 
     contrast(120%) 
     brightness(110%);
   ```

3. **다크모드 일관성**: 라이트/다크모드 모두 동일한 효과 적용

### 모바일 최적화

1. **코드블록**: 모바일에서만 좌우 여백 제거

   ```css
   @media (max-width: 768px) {
     .prose pre {
       margin-left: -1rem;
       width: calc(100% + 2rem);
     }
   }
   ```

2. **PWA 설정**: 복잡한 설정보다 기본 설정 유지
   - `statusBarStyle: "black-translucent"`만으로 충분
   - Safe Area 조작 시 콘텐츠 가려짐 주의

### 스타일 수정 시 체크리스트

- [ ] 전체 UI에 일관된 효과 적용했는가?
- [ ] 라이트/다크모드 모두 확인했는가?
- [ ] 모바일/데스크톱 반응형 확인했는가?
- [ ] 기존 기능에 영향 없이 적용했는가?

### CSS 모듈화 규칙

1. **파일 구조**: CSS가 500줄 이상이면 모듈화 고려

   ```
   src/app/styles/
   ├── base.css          # 기본 스타일 + 배경
   ├── glass-effects.css # 글래스모피즘 + 헤더 + 태그
   ├── mobile.css        # 모바일 최적화
   └── components.css    # 컴포넌트별 스타일
   ```

2. **모듈화 시 주의사항**:
   - 기존 파일 백업 후 분리 작업
   - 누락된 스타일 체크 (배경, 헤더, 태그 등)
   - 빌드 테스트로 검증
   - 임시/백업 파일 정리

3. **스타일 누락 방지**:
   - `glass-header`: 헤더 글래스 효과
   - `glass-tag`: 태그 글래스 효과  
   - 배경 그라데이션: 라이트/다크모드
   - 제목 스타일: Tailwind 클래스 확인

## 금지사항

- frontmatter에서 title, date 누락
- 다크모드 클래스 (`dark:`) 생략
- 클라이언트 컴포넌트 남용
- **사용자 승인 없이 다음 단계 진행**
- **계획 없이 바로 코드 작성**
- **테스트 코드 생략**
- **스타일 수정 시 일부만 적용하고 전체 놓치기**
- **복잡한 PWA 설정으로 인한 부작용**
- **CSS 모듈화 시 백업 없이 작업**
- **임시 파일 정리하지 않고 방치**
- **스타일 누락 체크 없이 빌드**
