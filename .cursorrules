# Next.js 블로그 프로젝트 AI 지침

## 프로젝트 개요
- Next.js 15 + Contentlayer2 + MDX 블로그
- Tailwind CSS 4 + Typography, Geist 폰트
- GitHub Pages 정적 배포 (`output: 'export'`)
- TypeScript 엄격 모드, 다크모드 지원

## 핵심 규칙
- 서버 컴포넌트 기본, 클라이언트는 필요시만 `"use client"`
- MDX frontmatter: `title`(필수), `date`(필수), `description`, `tags`
- 다크모드 필수: 모든 색상에 `dark:` 클래스 추가
- 모바일 우선 반응형, `max-w-4xl mx-auto px-4` 레이아웃

## 주요 패턴
### Contentlayer 데이터
```typescript
import { allPosts } from "contentlayer/generated";
const posts = allPosts.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
const post = allPosts.find((post) => post.slug === slug);
```

### MDX Frontmatter 예시
```yaml
---
title: "포스트 제목"          # 필수
date: "2025-09-15"         # 필수
description: "포스트 설명"    # 선택
tags: ["Next.js", "블로그"]  # 선택
---
```

### 스타일링 패턴
- 제목: `text-3xl font-bold` (홈), `text-4xl font-bold` (포스트)
- 본문: `prose` 클래스 (@tailwindcss/typography)
- 태그: `text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200`
- 색상: `bg-white dark:bg-gray-900`, `text-gray-900 dark:text-white`

## 빌드 & 배포
```bash
npm run dev    # 개발 서버 (Turbopack)
npm run build  # 정적 빌드 (GitHub Pages용)
```
- `output: 'export'`, `trailingSlash: true` 설정 필수
- `out/` 디렉토리에 정적 파일 생성

## 개발 워크플로우 (필수 준수)
### 1단계: 계획 수립 및 승인
- 모든 개발 요청 시 먼저 **상세한 계획**을 제시
- **기능 요구사항 분석** 및 **목표 명시**
- **디렉토리 구조** 및 **파일 배치 전략** 설명
- **각 파일의 역할과 생성 이유** 상세 설명
- **컴포넌트 간 관계도** 및 **데이터 흐름** 명시
- **기술 스택** 및 **라이브러리 선택 근거** 설명
- **예상 작업 시간** 및 **난이도** 평가
- **사용자 승인 후** 다음 단계 진행

### 2단계: 테스트 코드 작성 및 확인
- 실제 구현 전 **테스트 코드 먼저 작성**
- Jest + React Testing Library 사용
- **테스트 시나리오와 예상 결과** 설명
- **사용자 확인 후** 구현 단계로 진행

### 3단계: 구현 및 최종 확인
- 테스트를 통과하는 **실제 코드 구현**
- 구현된 **코드의 핵심 로직** 설명
- **다음 작업이나 개선사항** 제안
- **사용자 최종 승인** 요청

### 승인 요청 규칙
- 각 단계마다 반드시 **"다음 단계로 진행해도 될까요?"** 질문
- 사용자가 **명시적으로 승인**하기 전까지 대기
- 중간에 **수정 요청**이 있으면 해당 단계부터 재시작

## 금지사항
- frontmatter에서 title, date 누락
- 다크모드 클래스 (`dark:`) 생략
- 클라이언트 컴포넌트 남용
- **사용자 승인 없이 다음 단계 진행**
- **계획 없이 바로 코드 작성**
- **테스트 코드 생략**